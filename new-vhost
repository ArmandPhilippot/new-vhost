#! /bin/bash
#
# new-vhost
# Create a new vhost in Apache.
# Requirements: Apache (httpd), mkcert.
# Tested on: Manjaro 21.0.5.
# Originally written by Armand Philippot <https://www.armandphilippot.com/>.

###############################################################################
#
# The MIT License (MIT)

# Copyright (c) 2021 Armand Philippot

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
###############################################################################

set -e

###############################################################################
# Global variables
###############################################################################
# new-vhost version
_version="3.0.0"

# Colors
_color_error=$(printf '\e[31m')
_color_success=$(printf '\e[32m')
_color_warning=$(printf '\e[33m')
_color_choice=$(printf '\e[34m')
_color_output=$(printf '\e[35m')
_color_reset=$(printf '\e[0m')

###############################################################################
# Helpers
# Various helpers used across the script in different locations.
###############################################################################

# Print version
print_version() {
  printf "new-vhost v%s\n" "$_version"
  exit
}

# Display an error in case of an unplanned scenario then exit.
error_unexpected() {
  printf "%sAn unexpected error occurred.%s Exit.\n" "$_color_error" "$_color_reset"
  exit 1
}

# Display an error in case of invalid usage then exit.
invalid_usage() {
  printf "%sError:%s invalid usage.\n" "$_color_error" "$_color_reset"
  printf "Use \`--help\` or \`-h\` to display all accepted options.\n"
  exit 1
}

# Return the absolute path.
# Argument 1: a path to convert. Also used to store the absolute path.
get_absolute_path() {
  [ $# -ne 1 ] && error_unexpected

  local -n _dir=$1
  local _absolute_path

  case $_dir in
  /*) _absolute_path=$_dir ;;
  \~/*) _absolute_path="$HOME/${_dir:2}" ;;
  ./*) _absolute_path="$(pwd)/${_dir:2}" ;;
  *) _absolute_path="$(pwd)/$_dir" ;;
  esac

  eval "$1=$_absolute_path"
}

# Prompt user to define an existing directory path.
# Return the entered path.
set_path() {
  local _path

  while [ ! -d "$_path" ]; do
    printf "Set the path: "
    read -r -e _path
    get_absolute_path _path

    [ ! -d "$_path" ] && printf "%sError:%s %s is not a directory.\n" "$_color_error" "$_color_reset" "${_color_output}${_path}${_color_reset}"
  done

  _path=${_path%/}

  eval "$1=$_path"
}

# Ask user if the provided value is correct inside while true loop.
# Argument 1: a value to test.
# Return 1 if it is correct or 0 if not.
is_correct() {
  [ $# -ne 1 ] && error_unexpected

  local _value=$1
  local _validation

  while true; do
    printf "\nIs %s correct? %s[y/n]%s " "${_color_output}${_value}${_color_reset}" "$_color_choice" "$_color_reset"
    read -r _validation

    case $_validation in
    [yY]) return 1 ;;
    [nN]) return 0 ;;
    *) printf "\n%sError:%s please enter %s[y]%ses or %s[n]%so.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done
}

###############################################################################
# Safety Checks
# Do not execute the script if requirements are not filled.
###############################################################################

is_httpd_system() {
  [ -d /etc/httpd ]
}

is_apache_installed() {
  [ -x "$(command -v httpd)" ]
}

is_mkcert_installed() {
  [ -x "$(command -v mkcert)" ]
}

# Check if all the requirements are filled.
check_requirements() {
  printf "Checking requirements...\n"
  if is_apache_installed; then
    printf "%sSuccess:%s Apache is installed.\n" "$_color_success" "$_color_reset"

    if ! is_httpd_system; then
      printf "%sError:%s This script only takes into account httpd, sorry.\n" "$_color_error" "$_color_reset"
      printf "Exit.\n"
      exit 1
    fi
  else
    printf "%sError:%s Apache is not installed. Please install it before continuing.\n" "$_color_error" "$_color_reset"
    printf "Exit.\n"
    exit 2
  fi

  if is_mkcert_installed; then
    printf "%sSuccess:%s mkcert is installed.\n" "$_color_success" "$_color_reset"
  else
    printf "%sError:%s mkcert is not installed. It is required to generate a local certificate and to allow access in HTTPS. Please install it before continuing.\n" "$_color_error" "$_color_reset"
    printf "Exit.\n"
    exit 2
  fi

  printf "%sSuccess:%s Requirements checked.\n" "$_color_success" "$_color_reset"
}

###############################################################################
# Virtual Host Configuration
# Ask user for all the needed information to configure the vhost.
###############################################################################

is_vhost_already_exists() {
  [ $# -ne 1 ] && error_unexpected

  [ "$(grep -c " $1" < /etc/hosts)" -gt 0 ]
}

set_vhost_name() {
  local _vhost_name

  while true; do
    printf "\nEnter the vhost name: "
    read -r _vhost_name

    case $_vhost_name in
      *.*)
        if [ -n "$_vhost_name" ]; then
          is_correct "$_vhost_name" || break
        fi
        ;;
      *) printf "\n%sError:%s the vhost name must contain the tld (example: vhost.tdl).\n" "$_color_error" "$_color_reset"
    esac
  done

  if is_vhost_already_exists "$_vhost_name"; then
    printf "\n%sError:%s the vhost seems to be already configured.\n" "$_color_error" "$_color_reset"
    printf "Exit.\n"
    exit 1
  fi

  eval "$1=$_vhost_name"
  printf "%sSuccess:%s vhost name saved.\n" "$_color_success" "$_color_reset"
}

set_webroot_name() {
  local _webroot_choice
  local _webroot_name

  while true; do
    printf "\nWhat name should the webroot folder have?\n"
    printf "%s[1]%s htdocs (default)\n" "$_color_choice" "$_color_reset"
    printf "%s[2]%s www\n" "$_color_choice" "$_color_reset"
    printf "%s[3]%s Custom name\n" "$_color_choice" "$_color_reset"
    printf "%s[q]%s Cancel\n" "$_color_choice" "$_color_reset"
    printf "Your choice: "
    read -r _webroot_choice

    case $_webroot_choice in
    1 | "")
      _webroot_name="htdocs"
      break
      ;;
    2)
      _webroot_name="www"
      break
      ;;
    3)
      printf "\nEnter the webroot name: "
      read -r _webroot_name
      is_correct "$_webroot_name" || break
      ;;
    [qQ]) exit ;;
    *) printf "\n%sError:%s Enter %s[1]%s, %s[2]%s, %s[3]%s or %s[q]%suit.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done

  eval "$1=$_webroot_name"
  printf "%sSuccess:%s webroot name saved.\n" "$_color_success" "$_color_reset"
}

set_workspace_path() {
  local _workspace_choice
  local _workspace_path

  while true; do
    printf "\nIn which folder should we create the vhost?\n"
    printf "%s[1]%s %s (default)\n" "$_color_choice" "$_color_reset" "$PWD"
    printf "%s[2]%s Another directory\n" "$_color_choice" "$_color_reset"
    printf "%s[q]%s Cancel\n" "$_color_choice" "$_color_reset"
    printf "Your choice: "
    read -r _workspace_choice

    case $_workspace_choice in
    1 | "")
      _workspace_path="$PWD"
      _workspace_path=${_workspace_path%/}
      break
      ;;
    2)
      set_path _workspace_path
      is_correct "$_workspace_path" || break
      ;;
    [qQ]) exit ;;
    *) printf "\n%sError:%s Enter %s[1]%s, %s[2]%s or %s[q]%suit.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done

  eval "$1=$_workspace_path"
  printf "%sSuccess:%s workspace path saved.\n" "$_color_success" "$_color_reset"
}

set_certs_path() {
  local _certs_choice
  local _certs_path

  while true; do
    printf "\nWhere do you want to save your certificates?\n"
    printf "%s[1]%s $(mkcert -CAROOT) (default)\n" "$_color_choice" "$_color_reset"
    printf "%s[2]%s Another directory\n" "$_color_choice" "$_color_reset"
    printf "%s[q]%s Cancel\n" "$_color_choice" "$_color_reset"
    printf "Your choice: "
    read -r _certs_choice

    case $_certs_choice in
    1 | "")
      _certs_path="$(mkcert -CAROOT)"
      _certs_path=${_certs_path%/}
      break
      ;;
    2)
      set_path _certs_path
      is_correct "$_certs_path" || break
      ;;
    [qQ]) exit ;;
    *) printf "\n%sError:%s Enter %s[1]%s, %s[2]%s or %s[q]%suit.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done

  eval "$1=$_certs_path"
  printf "%sSuccess:%s certs path saved.\n" "$_color_success" "$_color_reset"
}

print_summary() {
  [ $# -ne 4 ] && error_callback

  local _vhost_name=$1
  local _webroot_name=$2
  local _workspace_path=$3
  local _certs_path=$4
  local _summary_choice

  printf "\n%sWarning:%s We are now going to configure the virtual host with the information you provide:\n" "$_color_warning" "$_color_reset"
  printf "* Name: %s\n" "${_color_output}${_vhost_name}${_color_reset}"
  printf "* Webroot: %s\n" "${_color_output}${_webroot_name}${_color_reset}"
  printf "* Workspace: %s\n" "${_color_output}${_workspace_path}${_color_reset}"
  printf "* Certs: %s\n" "${_color_output}${_certs_path}${_color_reset}"

  while true; do
    printf "\nShould we proceed? [y/n] "
    read -r _summary_choice

    case $_summary_choice in
      [yY]) break ;;
      [nN])
        printf "Abort.\n"
        exit
        ;;
      *) printf "\n%sError:%s Enter %s[y]%ses or %s[n]%so.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done
}

###############################################################################
# Virtual Host Creation
# Proceed to the vhost creation with data provided by the user.
###############################################################################

create_vhost_dir() {
  [ $# -ne 3 ] && error_callback

  local _workspace_path=$1
  local _vhost_name=$2
  local _webroot_name=$3

  printf "\nCreating vhost directories inside workspace...\n"

  if [ -d "$_workspace_path/$_vhost_name" ]; then
    printf "%sWarning:%s The folder already exists. Abort.\n" "$_color_warning" "$_color_reset"
    return
  else
    mkdir -p "$_workspace_path/$_vhost_name/$_webroot_name"
    mkdir -p "$_workspace_path/$_vhost_name/logs"
    printf "%sSuccess:%s The vhost directories have been created. See:\n" "$_color_success" "$_color_reset"
    find "$_workspace_path/$_vhost_name" -maxdepth 1
  fi
}

generate_local_certs() {
  [ $# -ne 2 ] && error_unexpected

  local _certs_dir=$1
  local _vhost_name=$2

  printf "\nGenerating local certificate...\n"

  if [ -f "$_certs_dir/$_vhost_name.pem" ] || [ -f "$_certs_dir/$_vhost_name-key.pem" ]; then
    printf "%sWarning:%s The certificate already exists. Abort.\n" "$_color_warning" "$_color_reset"
  else
    mkcert -cert-file "$_certs_dir"/"$_vhost_name".pem -key-file "$_certs_dir"/"$_vhost_name"-key.pem "$_vhost_name" "*.$_vhost_name"
    printf "%sSuccess:%s The local certificate has been generated.\n" "$_color_success" "$_color_reset"
  fi
}

create_vhost_config() {
  [ $# -ne 4 ] && error_unexpected

  local _workspace_path=$1
  local _vhost_name=$2
  local _webroot_name=$3
  local _certs_path=$4

  printf "\nCreating vhost configuration...\n"

  if [ -f "/etc/httpd/conf/vhosts/$_vhost_name" ]; then
    printf "%sWarning:%s The vhost config already exists. Abort.\n" "$_color_warning" "$_color_reset"
  else
    printf "%sWarning:%s Administrator rights are required to continue. We will create the vhost config file and a symlink between the Apache directory and your workspace.\n" "$_color_warning" "$_color_reset"
    sudo sh -c "cat <<-EOF >/etc/httpd/conf/vhosts/${_vhost_name}
<VirtualHost *:80>
    ServerName ${_vhost_name}
    ServerAlias *.${_vhost_name}
    Redirect permanent / http://www.${_vhost_name}
</VirtualHost>

<VirtualHost *:80>
    ServerAdmin webmaster@${_vhost_name}
    DocumentRoot \"/srv/http/${_vhost_name}/${_webroot_name}/\"
    ServerName www.${_vhost_name}
    ServerAlias *.${_vhost_name}
    ErrorLog \"/srv/http/${_vhost_name}/logs/error.log\"
    CustomLog \"/srv/http/${_vhost_name}/logs/access.log\" combined
    <Directory /srv/http/${_vhost_name}/${_webroot_name}/>
        Options -Indexes +FollowSymLinks +MultiViews
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>

<VirtualHost *:443>
    ServerName ${_vhost_name}:443
    ServerAlias *.${_vhost_name}:443
    SSLEngine on
    SSLCertificateFile \"${_certs_path}/${_vhost_name}.pem\"
    SSLCertificateKeyFile \"${_certs_path}/${_vhost_name}-key.pem\"
    Redirect permanent / https://www.${_vhost_name}
</VirtualHost>

<VirtualHost *:443>
    ServerAdmin webmaster@${_vhost_name}
    DocumentRoot \"/srv/http/${_vhost_name}/${_webroot_name}/\"
    ServerName www.${_vhost_name}:443
    ServerAlias *.${_vhost_name}:443
    SSLEngine on
    SSLCertificateFile \"${_certs_path}/${_vhost_name}.pem\"
    SSLCertificateKeyFile \"${_certs_path}/${_vhost_name}-key.pem\"
    ErrorLog \"/srv/http/${_vhost_name}/logs/error.log\"
    CustomLog \"/srv/http/${_vhost_name}/logs/access.log\" combined
    <Directory /srv/http/${_vhost_name}/${_webroot_name}/>
        Options -Indexes +FollowSymLinks +MultiViews
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
EOF"
    sudo sh -c "printf \"Include conf/vhosts/${_vhost_name}\" >>/etc/httpd/conf/httpd.conf"

    printf "%sSuccess:%s The vhost configuration has been created. See:\n" "$_color_success" "$_color_reset"
    find /etc/httpd/conf/vhosts/ -maxdepth 1 -name "*$_vhost_name*"
  fi
}

create_symlink() {
  local _workspace_path
  local _vhost_name

  printf "\nCreating symlink to Apache directory...\n"
  printf "%sWarning:%s Administrator rights are required to continue.\n" "$_color_warning" "$_color_reset"

  sudo sh -c "ln -s $_workspace_path/$_vhost_name /srv/http"

  printf "%sSuccess:%s Symlink has been created.\n" "$_color_success" "$_color_reset"
}

edit_hosts_file() {
  local _vhost_name=$1
  local _hosts_choice

  printf "\nRegistering the vhost in the hosts file...\n"
  printf "%sWarning:%s Administrator rights are required to continue.\n" "$_color_warning" "$_color_reset"

  sudo sh -c "printf \"127.0.0.1  ${_vhost_name}\n\" >>/etc/hosts"
  sudo sh -c "printf \"127.0.0.1  www.${_vhost_name}\n\" >>/etc/hosts"

  printf "%sSuccess:%s The vhost is now registered.\n" "$_color_success" "$_color_reset"

  while true; do
    printf "\nDo you want to check the hosts file? %s[y/n]%s " "$_color_choice" "$_color_reset"
    read -r _hosts_choice

    case $_hosts_choice in
    [yY])
      cat /etc/hosts
      break
      ;;
    [nN])
      break
      ;;
    *) printf "%sError:%s Enter %s[y]%ses or %s[n]%so.\n" "$_color_error" "$_color_reset" "$_color_choice" "$_color_reset" "$_color_choice" "$_color_reset" ;;
    esac
  done
}

###############################################################################
# Help menus
# Functions to print the various help menus.
###############################################################################

# Display help then exit.
print_help() {
  cat <<EOF
# USAGE
new-vhost [OPTIONS]

# DESCRIPTION
new-vhost is a script to quickly create a new virtual host with a local certificate. It works with Apache (httpd) and mkcert.

# OPTIONS
-h, --help        Print this help.
--version         Print new-vhost version.

# ABOUT
Version           $_version
License           MIT
Author            Armand Philippot
EOF

exit
}

###############################################################################
# Main
###############################################################################

# Check options passed as arguments.
# Require at least one argument.
set_options() {
  [ $# -eq 0 ] && error_unexpected

  while [ $# -ge 1 ]; do
    case $1 in
    --help|-h) print_help ;;
    --version) print_version ;;
    *) invalid_usage ;;
    esac
  done
}

# Main entry point
main() {
  local _vhost
  local _webroot
  local _workspace
  local _certs

  check_requirements
  set_vhost_name _vhost
  set_webroot_name _webroot
  set_workspace_path _workspace
  set_certs_path _certs
  print_summary "$_vhost" "$_webroot" "$_workspace" "$_certs"
  create_vhost_dir "$_workspace" "$_vhost" "$_webroot"
  generate_local_certs "$_certs" "$_vhost"
  create_vhost_config "$_workspace" "$_vhost" "$_webroot" "$_certs"
  create_symlink "$_workspace" "$_vhost"
  edit_hosts_file "$_vhost"
  printf "\n\n%sSuccess:%s All done!\n" "$_color_success" "$_color_reset"
  printf "Exit.\n"
  exit
}

###############################################################################
# Run the script
###############################################################################

if [ $# -eq 0 ]; then
  main
else
  set_options "$@"
fi
